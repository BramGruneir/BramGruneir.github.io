{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["Bytes_per_vCPU","xbytes","parseBytes","bytes","RAM_per_vCPU","DefaultNamesByLevel","1","2","3","4","5","DefaultCountsByLevel","calculateSpecs","vCPUs","replicationFactor","vCPUs_per_node","nodeCount","Storage","Capacity","CapacityPerNode","RealCapacity","IOPS","IOPS_per_node","MBPS","MBPS_per_node","RAM_per_node","Concurrency","Connections","plural","value","pluralize","singular","Node","node","children","this","props","map","n","boxClassName","failed","replicas","replicaClassName","className","name","id","React","Component","limit","num","min","max","GetDefaultUserState","levelCount","names","counts","failureMode","populateSearch","state","newSearch","qs","stringify","arrayFormat","parsedURL","parseUrl","window","location","href","query","newURL","url","history","pushState","fixUserState","defaultUserState","i","length","slice","fetchState","userState","Object","entries","parse","search","forEach","key","Array","isArray","v","parseInt","MainForm","failures","fill","deadReplicas","allowableDead","nodes","depth","specs","handleCountChange","bind","handleReplicationFactorChange","handleFailureModeChange","handleLevelsChange","handlevCPUChange","addEventListener","e","handlePopState","curState","getCurrentState","setState","update","level","event","target","forceUpdate","shift","unshift","child","populateNodeChildren","push","numReplicas","div","Math","floor","remainder","replicasPerChild","addRange","replicasToKill","levels","cur","queue","nextQueue","remainingReplicas","skippedLevelReplicaCount","undefined","reduce","a","b","killReplicas","nodeName","failureDisplay","foundValue","f","type","onChange","r","iec","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.475d9d39.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport qs from \"query-string\";\nimport pluralize from \"pluralize\";\nimport xbytes from 'xbytes';\n\n\nconst MaxLevelCount = 5;\nconst DefaultLevelCount = 3;\nconst DefaultReplicationFactor = 3;\nconst Max_vCPUs = 256;\nconst Min_vCPUs= 2;\n\nconst Bytes_per_vCPU = xbytes.parseBytes(\"150 GB\").bytes;\nconst IOPS_per_vCPU = 500;\nconst MBPS_per_vCPU = 30;\nconst Connections_per_vCPU = 4;\nconst RAM_per_vCPU = xbytes.parseBytes(\"4 GiB\").bytes;\n\nconst DefaultNamesByLevel: { [count: number]: Array<string> } = {\n  1: [\"Nodes\"],\n  2: [\"Data Centers\", \"Nodes\"],\n  3: [\"Regions\", \"Availability Zones\", \"Nodes\"],\n  4: [\"Regions\",\"Data Centers\",\"Availability Zones\",\"Nodes\"],\n  5: [\"Regions\",\"Data Centers\",\"Availability Zones\",\"Racks\",\"Nodes\"],\n};\n\nconst DefaultCountsByLevel: { [count: number]: Array<number> } = {\n  1: [3],\n  2: [3,3],\n  3: [3,3,3],\n  4: [3,3,3,3],\n  5: [3,3,3,3,3],\n}\n\ninterface NodeProps {\n  key: string;\n  id: number;\n  failed: boolean;\n  replicas: number;\n  name: string;\n  children: Array<NodeProps>;\n  className: string;\n  depth: number;\n}\n\ninterface Spec {\n  Storage: {\n    Capacity: number,\n    CapacityPerNode: number,\n    RealCapacity: number,\n    IOPS: number,\n    IOPS_per_node: number,\n    MBPS: number,\n    MBPS_per_node: number,\n    RAM_per_node: number,\n  },\n  Concurrency: {\n    Connections: number,\n  }\n}\n\nfunction calculateSpecs(\n  vCPUs: number,\n  replicationFactor: number,\n  vCPUs_per_node: number,\n  nodeCount: number,\n  ): Spec {\n  return {\n    Storage: {\n      Capacity: vCPUs * Bytes_per_vCPU,\n      CapacityPerNode: vCPUs * Bytes_per_vCPU / nodeCount,\n      RealCapacity: vCPUs * Bytes_per_vCPU / replicationFactor,\n      IOPS: vCPUs * IOPS_per_vCPU,\n      IOPS_per_node: IOPS_per_vCPU * vCPUs_per_node,\n      MBPS: vCPUs * MBPS_per_vCPU,\n      MBPS_per_node: MBPS_per_vCPU * vCPUs_per_node,\n      RAM_per_node: RAM_per_vCPU * vCPUs_per_node,\n    },\n    Concurrency: {\n      Connections: vCPUs * Connections_per_vCPU,\n    }\n  }\n}\n\n// Just to wrapper functions to ensure we don't get errors from the pluralize\n// library.\nfunction plural(value: any) {\n  return pluralize.plural(value || \"\");\n}\nfunction singular(value: any) {\n  return pluralize.singular(value || \"\");\n}\n\nfunction pickBoxClass(node: NodeProps): string {\n  if (node.failed) {\n    return \"Box-failed\";\n  }\n  if (node.replicas === 0) {\n    return \"Box-empty\";\n  }\n  return \"Box\";\n}\n\nclass Node extends React.Component<NodeProps, {}> {\n  render() {\n    const children = this.props.children.map((n) =>\n      <Node {...n} />\n    );\n    let boxClassName = pickBoxClass(this.props);\n    let replicaClassName = this.props.replicas > 0 ? \"Replicas-full\" : \"Replicas-empty\";\n    return (\n      <div className={`${boxClassName}`}>\n        <div>{this.props.name} {this.props.id}</div>\n        <div className={`${replicaClassName}`}>Replicas {this.props.replicas}</div>\n        <div className={this.props.className}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction limit(num: number, min: number, max: number): number {\n  if (num < min) {\n    return min;\n  }\n  if (num > max) {\n    return max;\n  }\n  return num;\n}\n\ntype UserState = {\n  levelCount: number;\n  names: Array<string>;\n  counts: Array<number>;\n  replicationFactor: number;\n  failureMode: number;\n  vCPUs: number;\n}\n\nfunction GetDefaultUserState(levelCount: number): UserState {\n  return {\n    levelCount: levelCount,\n    names: [...DefaultNamesByLevel[levelCount]],\n    counts: [...DefaultCountsByLevel[levelCount]],\n    replicationFactor: DefaultReplicationFactor,\n    failureMode: 1,\n    vCPUs: 4,\n  }\n}\n\nfunction populateSearch(state: UserState) {\n  const newSearch = qs.stringify(state, {arrayFormat: 'comma'});\n  const parsedURL = qs.parseUrl(window.location.href);\n  const oldSearch = qs.stringify(parsedURL.query, {arrayFormat: 'comma'});\n  if (newSearch === oldSearch) {\n    return\n  }\n  const newURL = parsedURL.url + '?' + newSearch;\n  window.history.pushState(state, \"CockroachDB Survival Tool\", newURL);\n}\n\nfunction fixUserState(state: UserState): UserState {\n  state.levelCount = limit(state.levelCount, 1, MaxLevelCount);\n  const defaultUserState = GetDefaultUserState(state.levelCount);\n  for (let i = 0; i < state.levelCount; i++) {\n    state.names[i] = state.names[i] || defaultUserState.names[i];\n    state.counts[i] = limit(state.counts[i], 1, i === state.levelCount - 1 ? 100: 10);\n  }\n  if (state.names.length > state.levelCount) {\n    state.names = state.names.slice(0, state.levelCount)\n  }\n  if (state.counts.length > state.levelCount) {\n    state.counts = state.counts.slice(0, state.levelCount)\n  }\n  if (state.replicationFactor % 2 === 0) {\n    state.replicationFactor--;\n  }\n  state.replicationFactor = limit(state.replicationFactor, 1, 99);\n  state.failureMode = limit(state.failureMode, 0, state.levelCount);\n  state.vCPUs = limit(state.vCPUs, Min_vCPUs, Max_vCPUs);\n\n  return state;\n}\n\nfunction fetchState(): UserState {\n  const defaultUserState = GetDefaultUserState(5);\n  let userState = GetDefaultUserState(5);\n  Object.entries(qs.parse(window.location.search, {arrayFormat: 'comma'})).forEach(\n    ([key, value]) => {\n      switch (key) {\n        case \"counts\":\n          if (value == null || !Array.isArray(value)) {\n            userState.counts = defaultUserState.counts;\n            break;\n          }\n          if (!Array.isArray(value)) {\n            userState.counts = defaultUserState.counts;\n            break;\n          }\n          let valueArray = value as Array<string>;\n          valueArray.forEach((v,i) => {\n            userState.counts[i] = parseInt(v + \"\") || defaultUserState.counts[i];\n          })\n          break;\n        case \"names\":\n          if (value == null || !Array.isArray(value)) {\n            userState.names = defaultUserState.names;\n            break;\n          }\n          if (!Array.isArray(value)) {\n            userState.names = defaultUserState.names;\n            break;\n          }\n          userState.names = value;\n          break;\n        case \"replicationFactor\": userState.replicationFactor = parseInt(value + \"\") || defaultUserState.replicationFactor; break;\n        case \"failureMode\": userState.failureMode = parseInt(value + \"\") || defaultUserState.failureMode; break;\n        case \"levelCount\": userState.levelCount = parseInt(value + \"\") || defaultUserState.levelCount; break;\n        case \"vCPUS\": userState.levelCount = parseInt(value + \"\") || defaultUserState.vCPUs; break;\n      }\n    }\n  )\n  userState = fixUserState(userState);\n  return userState;\n}\n\ninterface MainFormState {\n  userState: UserState;\n  failures: Array<number>;\n  deadReplicas: number;\n  allowableDead: number;\n  nodes: NodeProps;\n  nodeCount: number;\n  specs: Spec;\n}\n\nclass MainForm extends React.Component<{}, MainFormState> {\n  constructor(props: any) {\n    super(props);\n\n    let userState = GetDefaultUserState(DefaultLevelCount);\n    if (window.location.search.length === 0) {\n      populateSearch(userState);\n    } else {\n      userState = fetchState();\n    }\n\n    this.state = {\n      userState: userState,\n      failures: new Array(userState.levelCount).fill(0),\n      deadReplicas: 0,\n      allowableDead: 0,\n      nodes: {\n        key: \"sentinel\",\n        id: 0,\n        failed: false,\n        replicas: 0,\n        name: \"sentinel\",\n        children: [],\n        className: \"sentinel\",\n        depth: 0,\n      },\n      nodeCount: 0,\n      specs: calculateSpecs(0, 0, 0, 0),\n    };\n\n    this.handleCountChange = this.handleCountChange.bind(this)\n    this.handleReplicationFactorChange = this.handleReplicationFactorChange.bind(this);\n    this.handleFailureModeChange = this.handleFailureModeChange.bind(this);\n    this.handleLevelsChange = this.handleLevelsChange.bind(this);\n    this.handlevCPUChange = this.handlevCPUChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"popstate\", e => {\n      this.handlePopState();\n    });\n    let curState = this.getCurrentState();\n    this.setState(this.update(curState));\n  }\n\n  handlePopState() {\n    let curState = this.getCurrentState();\n    curState.userState = curState.userState = fetchState();\n    this.setState(this.update(curState));\n  }\n\n  getCurrentState(): MainFormState {\n    return {\n      userState: this.state.userState,\n      failures: this.state.failures,\n      deadReplicas: this.state.deadReplicas,\n      allowableDead: this.state.allowableDead,\n      nodes: this.state.nodes,\n      nodeCount: this.state.nodeCount,\n      specs: this.state.specs,\n    };\n  }\n\n  handleCountChange(level: number, event: any) {\n    let curState = this.getCurrentState();\n    const defaultUserState = GetDefaultUserState(curState.userState.levelCount);\n    let value = parseInt(event.target.value);\n    // Allow 0, so it can be reset to 1, but don't allow undef or other weirdness.\n    value = value === 0 ? value : value || defaultUserState.counts[level];\n    curState.userState.counts[level] = value;\n    this.setState(this.update(curState));\n  }\n  handleReplicationFactorChange(event: any) {\n    let curState = this.getCurrentState();\n    const defaultUserState = GetDefaultUserState(curState.userState.levelCount);\n    let value = parseInt(event.target.value) || defaultUserState.replicationFactor;\n    if (value % 2 === 0) {\n      if (this.state.userState.replicationFactor > value) {\n        value--;\n      } else {\n        value++;\n      }\n    }\n    curState.userState.replicationFactor = value;\n    this.setState(this.update(curState), this.forceUpdate);\n  }\n  handleFailureModeChange(event: any) {\n    let curState = this.getCurrentState();\n    curState.userState.failureMode = parseInt(event.target.value) || 0;\n    this.setState(this.update(curState));\n  }\n  handleLevelsChange(event: any) {\n    let value = parseInt(event.target.value);\n    // Allow 0, so it can be reset to 1, but don't allow undef or other weirdness.\n    value = value === 0 ? value : value || DefaultLevelCount;\n    value = limit(value, 1,5)\n    let curState = this.getCurrentState();\n    // Adjust the other values accordingly.\n    if (curState.userState.levelCount > value) {\n      curState.userState.names.shift();\n      curState.userState.counts.shift();\n    } else if (curState.userState.levelCount < value) {\n      const defaultUserState = GetDefaultUserState(value);\n      curState.userState.names = defaultUserState.names;\n      curState.userState.counts.unshift(defaultUserState.counts[0]);\n    }\n    curState.userState.levelCount = value;\n    curState.failures = new Array(value).fill(0);\n    this.setState(this.update(curState));\n  }\n  handlevCPUChange(event: any) {\n    let curState = this.getCurrentState();\n    const defaultUserState = GetDefaultUserState(curState.userState.levelCount);\n    curState.userState.vCPUs = parseInt(event.target.value) || defaultUserState.vCPUs;\n    this.setState(this.update(curState));\n  }\n\n  // Create all the nodes and their children based on the topology of the system.\n  populateNodeChildren(node: NodeProps, state: UserState) {\n    for (let i = 0; i < state.counts[node.depth]; i++) {\n      const childKey = `${node.key}-${i+1}`;\n      let child: NodeProps = {\n        key: childKey,\n        id: i + 1,\n        failed: false,\n        replicas: 0,\n        name: singular(state.names[node.depth]),\n        children: [],\n        className: `level${node.depth+1}`,\n        depth: node.depth+1,\n      }\n      // Add children (recursively)\n      this.populateNodeChildren(child, state);\n      // Add the child to this node.\n      node.children.push(child);\n    }\n  }\n\n  // Adds the example range by distributing the replicas amongst the nodes.\n  addRange(node: NodeProps, numReplicas: number) {\n    // First calculate the number of replicas per child node.\n    const div = Math.floor(numReplicas / node.children.length);\n    const remainder = numReplicas % node.children.length;\n    let replicasPerChild = new Array(node.children.length).fill(div);\n    for (let i = 0; i < remainder; i++) {\n      replicasPerChild[i]++;\n    }\n    // Now populate them, recursively.\n    for (let i = 0; i < node.children.length; i++) {\n      if (replicasPerChild[i] > 0) {\n        this.addRange(node.children[i], replicasPerChild[i]);\n      } else {\n        // no more replicas to divvy out.\n        break;\n      }\n    }\n    node.replicas = numReplicas\n  }\n\n  // Mark all possible nodes as killed, limited by the failure mode level.\n  killReplicas(\n    node: NodeProps,\n    failureMode: number,\n    replicasToKill: number,\n    failures: Array<number>,\n    levels: number,\n  ): number {\n    if ((failureMode === 0) || (replicasToKill === 0) || (node.replicas === 0)) {\n      return 0;\n    }\n\n    // This is a super strange tree walk. It has to go level by level and then\n    // hit the first child of each parent.  We also need to skip any node that\n    // is lower than any skipped ones at that level.\n    interface tuple {\n      n: NodeProps;\n      i: number;\n    }\n    let queue: Array<tuple> = [{n: node, i: 0}];\n    let nextQueue: Array<tuple> = [];\n    let cur: tuple | undefined;\n    let remainingReplicas: number = replicasToKill;\n    let skippedLevelReplicaCount = 0;\n    while ((remainingReplicas > 0) ) {\n      if (queue.length === 0) {\n        if (nextQueue.length === 0) {\n          // We are done!\n          break;\n        }\n        queue = [...nextQueue];\n        nextQueue = [];\n        skippedLevelReplicaCount = 0;\n      }\n      cur = queue.shift();\n      if ((cur === undefined) || (cur.n.replicas === 0)) {\n        break;\n      }\n      // Get the child node we're going to be working with for now.\n      const child = cur.n.children[cur.i];\n      if (\n        (failureMode <= child.depth) &&\n        (child.replicas <= remainingReplicas) &&\n        (child.replicas >= skippedLevelReplicaCount)\n      ) {\n        // We can kill this whole cur node.\n        child.failed = true;\n        failures[child.depth]++;\n        remainingReplicas-=child.replicas;\n      } else if (child.children.length > 0) {\n        // Push the first child to the end of the queue.\n        nextQueue.push({n: child, i: 0});\n        skippedLevelReplicaCount = Math.max(skippedLevelReplicaCount, child.replicas);\n      }\n      // If there is another child, add it.\n      if (cur.i+1 < cur.n.children.length) {\n        queue.push({n: cur.n, i: cur.i+1})\n      }\n    }\n    return replicasToKill - remainingReplicas;\n  }\n\n  update(state: MainFormState): MainFormState {\n    // Update the search params.\n    state.userState = fixUserState(state.userState);\n    populateSearch(state.userState);\n\n    // Spec out the whole system.\n    state.allowableDead = Math.floor(state.userState.replicationFactor / 2);\n    state.nodeCount = state.userState.counts.reduce((a,b) => a * b, 1);\n\n    // Pre-populate all levels, use a sentinel node to make the recursion easier.\n    state.nodes = {\n      key: \"s\",\n      id: 0,\n      failed: false,\n      replicas: 0,\n      name: \"sentinel\",\n      children: [],\n      className: \"sentinel\",\n      depth: 0,\n    }\n    this.populateNodeChildren(state.nodes, state.userState);\n\n    // Add the example range.\n    this.addRange(state.nodes, state.userState.replicationFactor)\n\n    state.failures = new Array(state.userState.levelCount+1).fill(0);\n    // Add in the dead replicas\n    state.deadReplicas = (state.nodeCount < state.userState.replicationFactor) ? 0 :\n      this.killReplicas(\n        state.nodes,\n        state.userState.failureMode,\n        state.allowableDead,\n        state.failures,\n        state.userState.levelCount,\n      );\n\n    // Remove the extra failure level.\n    state.failures.shift()\n\n    // Calculate the specs.\n    state.specs = calculateSpecs(\n      state.userState.vCPUs*state.nodeCount,\n      state.userState.replicationFactor,\n      state.userState.vCPUs,\n      state.nodeCount,\n    );\n\n    return state;\n  }\n\n  render() {\n    const nodeName = this.state.userState.names[this.state.userState.names.length-1];\n    let failureDisplay: Array<string> = Array(this.state.failures.length);\n    let foundValue = false;\n    this.state.failures.forEach((f,i) => {\n      if (i < this.state.userState.failureMode-1) {\n        failureDisplay[i] = \"Ignore\";\n      } else {\n        if (foundValue) {\n          failureDisplay[i] = \"Display\";\n        } else if (f === 0) {\n          failureDisplay[i] = \"Warning\";\n        } else {\n          failureDisplay[i] = \"Display\";\n          foundValue = true;\n        }\n      }\n    });\n    return (\n      <div>\n        <div className=\"App-form\">\n          <form>\n            <table className=\"App-table\">\n              <thead>\n                <tr>\n                  {\n                    this.state.userState.names.map((name, i) => {\n                      return <th key={`title-${name}-${i}`}>{plural(name)}</th>;\n                    })\n                  }\n                  <th>Replication Factor</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  {\n                    this.state.userState.names.map((name, i) =>\n                      <td key={`input-${name}-${i}`}>\n                        <input className=\"App-input\"\n                          type=\"number\"\n                          name={name}\n                          value={this.state.userState.counts[i]}\n                          onChange={(e) => this.handleCountChange(i, e)} />\n                      </td>\n                    )\n                  }\n                  <td>\n                    <input className=\"App-input\" name=\"replicationFactor\" type=\"number\" value={this.state.userState.replicationFactor} onChange={this.handleReplicationFactorChange} />\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <div className=\"Selector\">\n              <div>Failure Mode:</div>\n              <select className=\"FailureSelect\" value={this.state.userState.failureMode} onChange={this.handleFailureModeChange}>\n                <option value={0}>None</option>\n                {\n                  this.state.userState.names.map((n,i) =>\n                    <option value={i+1} key={`failureMode-${n}-${i}`}>{singular(n)}</option>\n                  )\n                }\n              </select>\n            </div>\n          </form>\n        </div>\n        {\n          this.state.nodeCount < this.state.userState.replicationFactor && <div className=\"Underreplicated\">\n            The system is underreplicated: There are {this.state.nodeCount} nodes, but {this.state.userState.replicationFactor} are needed.\n          </div>\n        }\n        {\n          this.state.userState.failureMode !== 0 && <div className=\"FailureResults\">\n            <div>With {this.state.userState.replicationFactor}x replication you can survive a max of {this.state.allowableDead} dead replica{this.state.allowableDead !== 1 && \"s\"}.</div>\n            <div>This scenario will survive losing at most:</div>\n            <div className=\"FailureTable\">\n              {\n                this.state.failures.map((v, i) => {\n                  if (failureDisplay[i] === \"Ignore\") {\n                    return false;\n                  }\n                  return <div className=\"FailureRow\" key={`failureRow-${v}-${i}`}>\n                    <div className=\"FailureColumn\">\n                      <div className={`FailureHeader${failureDisplay[i]}`}>{plural(this.state.userState.names[i])}</div>\n                    </div>\n                    <div className=\"FailureColumn\">\n                      <div className={`FailureValue${failureDisplay[i]}`}>{this.state.failures[i]}</div>\n                    </div>\n                  </div>\n                })\n              }\n            </div>\n          </div>\n        }\n        <div className=\"App-container\">\n          {\n            this.state.nodes.children.map((r) =>\n              <Node {...r} />\n            )\n          }\n        </div>\n        <form>\n          <div className=\"Selector\">\n            <div>Number of Levels:</div>\n            <input className=\"App-input\"\n               type=\"number\"\n               name=\"levels\"\n               value={this.state.userState.levelCount}\n               onChange={this.handleLevelsChange} />\n          </div>\n        </form>\n        <form>\n          <div className=\"Footer\">\n            <h2>Sizing Calculations</h2>\n            <div className=\"Selector\">\n              <div>{`vCPUs per ${singular(nodeName)}`}</div>\n              <input className=\"App-input\"\n                type=\"number\"\n                name=\"vCPUs\"\n                value={this.state.userState.vCPUs}\n                onChange={this.handlevCPUChange} />\n            </div>\n            <div className=\"SizingResults\">\n            <div>\n                With this setup, there are {this.state.nodeCount} {plural(nodeName)} and {this.state.nodeCount*this.state.userState.vCPUs} vCPUs.\n              </div>\n              <div>Some rule of thumb sizing calculations allow for:</div>\n              <div className=\"SizingTable\">\n                <div className=\"SizingRpw\">\n                  <div className=\"SizingColumn\">\n                    <div className=\"SizingValue\">\n                      {xbytes(this.state.specs.Storage.Capacity, {iec: true})} ({xbytes(this.state.specs.Storage.Capacity, {iec: false})}) total storage, {xbytes(this.state.specs.Storage.CapacityPerNode, {iec: true})} ({xbytes(this.state.specs.Storage.CapacityPerNode, {iec: false})}) storage per {singular(nodeName)}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"SizingRpw\">\n                  <div className=\"SizingColumn\">\n                    <div className=\"SizingValue\">\n                      {xbytes(this.state.specs.Storage.RealCapacity, {iec: true})} ({xbytes(this.state.specs.Storage.RealCapacity, {iec: false})}) actual storage (due to {this.state.userState.replicationFactor}x replication)\n                    </div>\n                  </div>\n                </div>\n                <div className=\"SizingRpw\">\n                  <div className=\"SizingColumn\">\n                    <div className=\"SizingValue\">\n                      {this.state.specs.Storage.IOPS} IOPS total, {this.state.specs.Storage.IOPS_per_node} IOPS per {singular(nodeName)}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"SizingRpw\">\n                  <div className=\"SizingColumn\">\n                    <div className=\"SizingValue\">\n                      {this.state.specs.Storage.MBPS} MBPS total, {this.state.specs.Storage.MBPS_per_node} MBPS per {singular(nodeName)}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"SizingRpw\">\n                  <div className=\"SizingColumn\">\n                    <div className=\"SizingValue\">\n                      {xbytes(this.state.specs.Storage.RAM_per_node, {iec: true})} RAM per {singular(nodeName)} recommended\n                    </div>\n                  </div>\n                </div>\n                <div className=\"SizingRpw\">\n                  <div className=\"SizingColumn\">\n                    <div className=\"SizingValue\">{this.state.specs.Concurrency.Connections} concurrent <i>active</i> connections</div>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <i>\n                  *Please note that these values are rough approximations based on some back of the envelope calculations.\n                </i>\n              </div>\n              <div>\n                <i>\n                  <b>\n                    Contact Cockroach Labs for a more complete and accurate sizing calculation.\n                  </b>\n                </i>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainForm />\n      </header>\n    </div >\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}