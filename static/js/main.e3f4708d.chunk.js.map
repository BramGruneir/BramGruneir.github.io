{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["generateKey","props","Math","random","toString","pickBoxClass","node","failed","replicas","FailureMode","Node","boxClassName","this","replicaClassName","className","id","React","Component","AvailabilityZone","nodes","map","n","DataCenter","azs","availabilityZones","az","Region","dcs","datacenters","dc","limit","num","min","max","defaultUserState","numberRegions","DCsPerRegion","AZsPerDC","NodesPerAZ","replicationFactor","failureMode","populateSearch","state","newSearch","qs","stringify","parsedURL","parseUrl","window","location","href","query","newURL","url","history","pushState","fixUserState","fetchState","userState","Object","entries","parse","search","forEach","key","value","parseInt","MainForm","length","failedRegions","failedDCs","failedAZs","failedNodes","deadReplicas","allowableDead","regions","handleNumberRegionsChange","bind","handleDCsPerRegionChange","handleAZsPerDCChange","handleNodesPerAZChange","handleReplicationFactorChange","handleFailureModeChange","addEventListener","e","handlePopState","curState","getCurrentState","setState","update","event","target","forceUpdate","None","floor","r","regionProps","d","dataCenterProps","a","availabilityZoneProps","nodeProps","push","i","region","j","k","l","nodeCount","type","onChange","name","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3f4708d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport qs from \"query-string\";\n\ninterface NodeProps {\n  key: string;\n  id: number;\n  failed: boolean;\n  replicas: number;\n}\n\nfunction generateKey(props: NodeProps): string {\n  //return `${props.id}-${props.replicas}-${props.failed}`;\n  return Math.random().toString();\n}\n\nfunction pickBoxClass(node: NodeProps): string {\n  if (node.failed) {\n    return \"Box-failed\";\n  }\n  if (node.replicas === 0) {\n    return \"Box-empty\";\n  }\n  return \"Box\";\n}\n\nclass Node extends React.Component<NodeProps, {}> {\n  render() {\n    let boxClassName = pickBoxClass(this.props);\n    let replicaClassName = this.props.replicas > 0 ? \"Replicas-full\" : \"Replicas-empty\";\n    return (\n      <div className={`${boxClassName}`}>\n        <div>Node {this.props.id}</div>\n        <div className={`${replicaClassName}`}>Replicas {this.props.replicas}</div>\n      </div>\n    );\n  }\n}\n\ninterface AvailabilityZoneProps extends NodeProps {\n  nodes: Array<NodeProps>;\n}\n\nclass AvailabilityZone extends React.Component<AvailabilityZoneProps, {}> {\n  render() {\n    let nodes = this.props.nodes.map((n) =>\n      <Node {...n} />\n    );\n    let boxClassName = pickBoxClass(this.props);\n    let replicaClassName = this.props.replicas > 0 ? \"Replicas-full\" : \"Replicas-empty\";\n    return (\n      <div className={`${boxClassName}`}>\n        <div>AZ {this.props.id}</div>\n        <div className={`${replicaClassName}`}>Replicas {this.props.replicas}</div>\n        {nodes}\n      </div>\n    );\n  }\n}\n\ninterface DataCenterProps extends NodeProps {\n  availabilityZones: Array<AvailabilityZoneProps>;\n}\n\nclass DataCenter extends React.Component<DataCenterProps, {}> {\n  render() {\n    let azs = this.props.availabilityZones.map((az) =>\n      <AvailabilityZone {...az} />\n    );\n    let boxClassName = pickBoxClass(this.props);\n    let replicaClassName = this.props.replicas > 0 ? \"Replicas-full\" : \"Replicas-empty\";\n    return (\n      <div className={`${boxClassName}`}>\n        <div>DC {this.props.id}</div>\n        <div className={`${replicaClassName}`}>Replicas {this.props.replicas}</div>\n        {azs}\n      </div>\n    );\n  }\n}\n\ninterface RegionProps extends NodeProps {\n  datacenters: Array<DataCenterProps>;\n}\n\nclass Region extends React.Component<RegionProps, {}> {\n  render() {\n    let dcs = this.props.datacenters.map((dc) =>\n      <DataCenter {...dc} />\n    );\n    let boxClassName = pickBoxClass(this.props);\n    let replicaClassName = this.props.replicas > 0 ? \"Replicas-full\" : \"Replicas-empty\";\n    return (\n      <div className={`${boxClassName}`}>\n        <div>Region {this.props.id}</div>\n        <div className={`${replicaClassName}`}>Replicas {this.props.replicas}</div>\n        <div className=\"App-container\">\n          {dcs}\n        </div>\n      </div>\n    );\n  }\n}\n\nenum FailureMode {\n  None,\n  Region,\n  DataCenter,\n  AvailabilityZone,\n  Node,\n}\n\nfunction limit(num: number, min: number, max: number): number {\n  if (num < min) {\n    return min;\n  }\n  if (num > max) {\n    return max;\n  }\n  return num;\n}\n\ninterface UserState {\n  numberRegions: number;\n  DCsPerRegion: number;\n  AZsPerDC: number;\n  NodesPerAZ: number;\n  replicationFactor: number;\n  failureMode: FailureMode;\n}\n\nconst defaultUserState: UserState = {\n  numberRegions: 1,\n  DCsPerRegion: 3,\n  AZsPerDC: 3,\n  NodesPerAZ: 3,\n  replicationFactor: 3,\n  failureMode: FailureMode.Region,\n}\n\nfunction populateSearch(state: UserState) {\n  let newSearch = qs.stringify(state);\n  let parsedURL = qs.parseUrl(window.location.href);\n  let oldSearch = qs.stringify(parsedURL.query);\n  if (newSearch === oldSearch) {\n    return\n  }\n  let newURL = parsedURL.url + '?' + newSearch;\n  window.history.pushState(state, \"CockroachDB Survival Tool\", newURL);\n}\n\nfunction fixUserState(state: UserState): UserState {\n  state.numberRegions = limit(state.numberRegions, 1, 10);\n  state.DCsPerRegion = limit(state.DCsPerRegion, 1, 10);\n  state.AZsPerDC = limit(state.AZsPerDC, 1, 10);\n  state.NodesPerAZ = limit(state.NodesPerAZ, 1, 100);\n  if (state.replicationFactor % 2 === 0) {\n    state.replicationFactor--;\n  }\n  state.replicationFactor = limit(state.replicationFactor, 1, 99);\n  return state;\n}\n\nfunction fetchState(): UserState {\n  let userState = defaultUserState;\n  Object.entries(qs.parse(window.location.search)).forEach(\n    ([key, value]) => {\n      switch (key) {\n        case \"numberRegions\": userState.numberRegions = parseInt(value + \"\") || defaultUserState.numberRegions; break;\n        case \"DCsPerRegion\": userState.DCsPerRegion = parseInt(value + \"\") || defaultUserState.DCsPerRegion; break;\n        case \"AZsPerDC\": userState.AZsPerDC = parseInt(value + \"\") || defaultUserState.AZsPerDC; break;\n        case \"NodesPerAZ\": userState.NodesPerAZ = parseInt(value + \"\") || defaultUserState.NodesPerAZ; break;\n        case \"replicationFactor\": userState.replicationFactor = parseInt(value + \"\") || defaultUserState.replicationFactor; break;\n        case \"failureMode\": userState.failureMode = parseInt(value + \"\") || defaultUserState.failureMode; break;\n      }\n    }\n  )\n  userState = fixUserState(userState);\n  return userState;\n}\n\ninterface MainFormState {\n  userState: UserState;\n  failedRegions: number;\n  failedDCs: number;\n  failedAZs: number;\n  failedNodes: number;\n  deadReplicas: number;\n  allowableDead: number;\n  regions: Array<RegionProps>;\n}\n\nclass MainForm extends React.Component<{}, MainFormState> {\n  constructor(props: any) {\n    super(props);\n\n    let userState = defaultUserState;\n    if (window.location.search.length === 0) {\n      populateSearch(userState);\n    } else {\n      userState = fetchState();\n    }\n\n    this.state = {\n      userState: userState,\n      failedRegions: 0,\n      failedDCs: 0,\n      failedAZs: 0,\n      failedNodes: 0,\n      deadReplicas: 0,\n      allowableDead: 0,\n      regions: [],\n    };\n\n    this.handleNumberRegionsChange = this.handleNumberRegionsChange.bind(this);\n    this.handleDCsPerRegionChange = this.handleDCsPerRegionChange.bind(this);\n    this.handleAZsPerDCChange = this.handleAZsPerDCChange.bind(this);\n    this.handleNodesPerAZChange = this.handleNodesPerAZChange.bind(this);\n    this.handleReplicationFactorChange = this.handleReplicationFactorChange.bind(this);\n    this.handleFailureModeChange = this.handleFailureModeChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"popstate\", e => {\n      this.handlePopState();\n    });\n    let curState = this.getCurrentState();\n    this.setState(this.update(curState));\n  }\n\n  handlePopState() {\n    let curState = this.getCurrentState();\n    curState.userState = curState.userState = fetchState();\n    this.setState(this.update(curState));\n  }\n\n  getCurrentState(): MainFormState {\n    return {\n      userState: this.state.userState,\n      failedRegions: this.state.failedRegions,\n      failedDCs: this.state.failedDCs,\n      failedAZs: this.state.failedAZs,\n      failedNodes: this.state.failedNodes,\n      deadReplicas: this.state.deadReplicas,\n      allowableDead: this.state.allowableDead,\n      regions: [],\n    };\n  }\n\n  handleNumberRegionsChange(event: any) {\n    let value = parseInt(event.target.value) || defaultUserState.numberRegions;\n    let curState = this.getCurrentState();\n    curState.userState.numberRegions = value;\n    this.setState(this.update(curState));\n  }\n  handleDCsPerRegionChange(event: any) {\n    let value = parseInt(event.target.value) || defaultUserState.DCsPerRegion;\n    let curState = this.getCurrentState();\n    curState.userState.DCsPerRegion = value;\n    this.setState(this.update(curState));\n  }\n  handleAZsPerDCChange(event: any) {\n    let value = parseInt(event.target.value) || defaultUserState.AZsPerDC;\n    let curState = this.getCurrentState();\n    curState.userState.AZsPerDC = value;\n    this.setState(this.update(curState));\n  }\n  handleNodesPerAZChange(event: any) {\n    let value = parseInt(event.target.value) || defaultUserState.NodesPerAZ;\n    let curState = this.getCurrentState();\n    curState.userState.NodesPerAZ = value;\n    this.setState(this.update(curState));\n  }\n  handleReplicationFactorChange(event: any) {\n    let value = parseInt(event.target.value) || defaultUserState.replicationFactor;\n    if (value % 2 === 0) {\n      if (this.state.userState.replicationFactor > value) {\n        value--;\n      } else {\n        value++;\n      }\n    }\n    let curState = this.getCurrentState();\n    curState.userState.replicationFactor = value;\n    this.setState(this.update(curState), this.forceUpdate);\n  }\n  handleFailureModeChange(event: any) {\n    let curState = this.getCurrentState();\n    curState.userState.failureMode = parseInt(event.target.value) || FailureMode.None;\n    this.setState(this.update(curState));\n  }\n\n  update(state: MainFormState): MainFormState {\n    // Update the search params.\n    state.userState = fixUserState(state.userState);\n    populateSearch(state.userState);\n\n    // Spec out the whole system.\n    state.allowableDead = Math.floor(state.userState.replicationFactor / 2);\n\n    // Regions\n    state.regions = [];\n    for (let r = 0; r < state.userState.numberRegions; r++) {\n      let regionProps: RegionProps = {\n        key: \"\",\n        id: r + 1,\n        failed: false,\n        datacenters: [],\n        replicas: 0,\n      }\n\n      // Data Centers\n      for (let d = 0; d < state.userState.DCsPerRegion; d++) {\n        let dataCenterProps: DataCenterProps = {\n          key: \"\",\n          id: d + 1,\n          failed: false,\n          replicas: 0,\n          availabilityZones: [],\n        }\n\n        // Availability Zones\n        for (let a = 0; a < state.userState.AZsPerDC; a++) {\n          let availabilityZoneProps: AvailabilityZoneProps = {\n            key: \"\",\n            id: a + 1,\n            failed: false,\n            replicas: 0,\n            nodes: [],\n          }\n\n          // Nodes\n          for (let a = 0; a < state.userState.NodesPerAZ; a++) {\n            let nodeProps: NodeProps = {\n              key: \"\",\n              id: a + 1,\n              failed: false,\n              replicas: 0,\n            }\n            availabilityZoneProps.nodes.push(nodeProps);\n          }\n          dataCenterProps.availabilityZones.push(availabilityZoneProps);\n        }\n        regionProps.datacenters.push(dataCenterProps);\n      }\n      state.regions.push(regionProps);\n    }\n\n    // Add the example range.  This is not fun, there must be a better way.\n    // Replicas per region\n    for (let i = 0; i < state.userState.replicationFactor; i++) {\n      let region = i % state.userState.numberRegions;\n      state.regions[region].replicas++;\n    }\n    // Replicas per DC\n    state.regions.forEach(r => {\n      for (let i = 0; i < r.replicas; i++) {\n        let dc = i % state.userState.DCsPerRegion;\n        r.datacenters[dc].replicas++;\n      }\n    });\n    // Replicas per AZ\n    state.regions.forEach(r =>\n      r.datacenters.forEach(dc => {\n        for (let i = 0; i < dc.replicas; i++) {\n          let az = i % state.userState.AZsPerDC;\n          dc.availabilityZones[az].replicas++;\n        }\n      })\n    );\n    // Replicas per Nodes\n    state.regions.forEach(r =>\n      r.datacenters.forEach(dc =>\n        dc.availabilityZones.forEach(az => {\n          // This is technically not needed, can't put more than one replica on a node.\n          for (let i = 0; i < az.replicas; i++) {\n            let n = i % state.userState.NodesPerAZ;\n            az.nodes[n].replicas++;\n          }\n        })\n      )\n    );\n\n    // Check for failures.\n    state.deadReplicas = 0;\n    state.failedRegions = 0;\n    state.failedDCs = 0;\n    state.failedAZs = 0;\n    state.failedNodes = 0;\n\n    // Regions\n    if (state.userState.failureMode === FailureMode.Region) {\n      for (let i = 0; i < state.userState.numberRegions; i++) {\n        if (state.regions[i].replicas === 0) {\n          // An empty region means that the range never wrapped and we know the\n          // rest of Regions or DCs will be empty.\n          break;\n        }\n        if (state.deadReplicas + state.regions[i].replicas <= state.allowableDead) {\n          state.regions[i].failed = true;\n          state.deadReplicas += state.regions[i].replicas;\n          state.failedRegions++;\n        } else {\n          // Don't continue here as these are traversed in order. This ensures\n          // we don't kill a region with less replicas. We want worst case\n          // scenario every time.\n          break;\n        }\n      }\n    }\n\n    // DCs\n    if (state.userState.failureMode > FailureMode.None &&\n      state.userState.failureMode <= FailureMode.DataCenter &&\n      state.deadReplicas < state.allowableDead) {\n      // Traverse the first DC in each region, then the second DC in each region ...\n      let i = -1;\n      let j = 0;\n      while (state.deadReplicas < state.allowableDead) {\n        i++;\n        if (i >= state.userState.numberRegions) {\n          i = 0;\n          j++;\n          if (j >= state.userState.DCsPerRegion) {\n            // We are at the end.\n            break;\n          }\n        }\n        if (state.regions[i].failed) {\n          // Skip all failed regions.\n          continue;\n        }\n        if ((state.regions[i].replicas === 0) ||\n          (state.regions[i].datacenters[j].replicas === 0)) {\n          // An empty region or datacenter means that the range never wrapped\n          // and we know the rest of Regions or DCs will be empty.\n          break;\n        }\n        if (state.deadReplicas + state.regions[i].datacenters[j].replicas <= state.allowableDead) {\n          state.regions[i].datacenters[j].failed = true;\n          state.deadReplicas += state.regions[i].datacenters[j].replicas;\n          state.failedDCs++;\n        } else {\n          // Don't continue here as these are traversed in order. This ensures\n          // we don't kill a DC with less replicas. We want worst case scenario\n          // every time.\n          break;\n        }\n      }\n    }\n\n    // AZs\n    if (state.userState.failureMode > FailureMode.None &&\n      state.userState.failureMode <= FailureMode.AvailabilityZone &&\n      state.deadReplicas < state.allowableDead) {\n      // Traversal order for a 3x3x3: (Region-DC-AZ)\n      // 1-1-1, 2-1-1, 3-1-1,\n      // 1-2-1, 2-2-1, 3-2-1,\n      // 1-3-1, 2-3-1, 3-3-1,\n      // 1-1-2, 2-1-2, 3-1-2,\n      // 1-2-2, 2-2-2, 3-2-2,\n      // 1-3-2, 2-3-2, 3-3-2,\n      // 1-1-3, 2-1-3, 3-1-3,\n      // 1-2-3, 2-2-3, 3-2-3,\n      // 1-3-3, 2-3-3, 3-3-3,\n      let i = -1;\n      let j = 0;\n      let k = 0;\n      while (state.deadReplicas < state.allowableDead) {\n        i++;\n        if (i >= state.userState.numberRegions) {\n          i = 0;\n          j++;\n          if (j >= state.userState.DCsPerRegion) {\n            j = 0;\n            k++;\n            if (k >= state.userState.AZsPerDC) {\n              // We are at the end.\n              break;\n            }\n          }\n        }\n        if (state.regions[i].failed ||\n          state.regions[i].datacenters[j].failed) {\n          // Skip all failed regions and datacenters.\n          continue;\n        }\n        if ((state.regions[i].replicas === 0) ||\n          (state.regions[i].datacenters[j].replicas === 0) ||\n          (state.regions[i].datacenters[j].availabilityZones[k].replicas === 0)) {\n          // An empty region, DC or AZ means that the range never wrapped\n          // and we know the rest of Regions, DCs or AZs will be empty.\n          break;\n        }\n\n        if (state.deadReplicas + state.regions[i].datacenters[j].availabilityZones[k].replicas <= state.allowableDead) {\n          state.regions[i].datacenters[j].availabilityZones[k].failed = true;\n          state.deadReplicas += state.regions[i].datacenters[j].availabilityZones[k].replicas;\n          state.failedAZs++;\n        } else {\n          // Don't continue here as these are traversed in order. This ensures\n          // we don't kill a AZ with less replicas. We want worst case scenario\n          // every time.\n          break;\n        }\n      }\n    }\n\n    // Nodes\n    if (state.userState.failureMode > FailureMode.None &&\n      state.userState.failureMode <= FailureMode.Node &&\n      state.deadReplicas < state.allowableDead) {\n      // Traversal order for a 2x2x2x2: (Region-DC-AZ-Nodes)\n      // 1-1-1-1, 2-1-1-1,\n      // 1-2-1-1, 2-2-1-1,\n      // 1-1-2-1, 2-1-2-1,\n      // 1-2-2-1, 2-2-2-1,\n      // 1-1-1-2, 2-1-1-2,\n      // 1-2-1-2, 2-2-1-2,\n      // 1-1-2-2, 2-1-2-2,\n      // 1-2-2-2, 2-2-2-2,\n\n      let i = -1;\n      let j = 0;\n      let k = 0;\n      let l = 0;\n      while (state.deadReplicas < state.allowableDead) {\n        i++;\n        if (i >= state.userState.numberRegions) {\n          i = 0;\n          j++;\n          if (j >= state.userState.DCsPerRegion) {\n            j = 0;\n            k++;\n            if (k >= state.userState.AZsPerDC) {\n              k = 0;\n              l++;\n              if (l >= state.userState.NodesPerAZ) {\n                // We are at the end.\n                break;\n              }\n            }\n          }\n        }\n        if (state.regions[i].failed ||\n          state.regions[i].datacenters[j].failed ||\n          state.regions[i].datacenters[j].availabilityZones[k].failed\n        ) {\n          // Skip all failed regions, DCs and AZs.\n          continue;\n        }\n        if ((state.regions[i].replicas === 0) ||\n          (state.regions[i].datacenters[j].replicas === 0) ||\n          (state.regions[i].datacenters[j].availabilityZones[k].replicas === 0) ||\n          (state.regions[i].datacenters[j].availabilityZones[k].nodes[l].replicas === 0)) {\n          // An empty region, DC, AZ or node means that the range never wrapped\n          // and we know the rest of Regions, DCs, AZs or nodes will be empty.\n          break;\n        }\n\n        if (state.deadReplicas + state.regions[i].datacenters[j].availabilityZones[k].nodes[l].replicas <= state.allowableDead) {\n          state.regions[i].datacenters[j].availabilityZones[k].nodes[l].failed = true;\n          state.deadReplicas += state.regions[i].datacenters[j].availabilityZones[k].nodes[l].replicas;\n          state.failedNodes++;\n        } else {\n          // Don't continue here as these are traversed in order. This ensures\n          // we don't kill a node with less replicas. We want worst case\n          // scenario every time.\n          // Since nodes should only ever have one replica, this only matters\n          // when the cluster underreplicated.\n          break;\n        }\n      }\n    }\n\n    // Add all the keys.\n    state.regions.forEach(r => {\n      r.key = generateKey(r);\n      r.datacenters.forEach(dc => {\n        dc.key = generateKey(dc);\n        dc.availabilityZones.forEach(az => {\n          az.key = generateKey(az);\n          az.nodes.forEach(n => {\n            n.key = generateKey(n);\n          });\n        });\n      });\n    });\n\n    return state;\n  }\n\n  render() {\n    let regions = this.state.regions.map((r) =>\n      <Region {...r} />\n    );\n    let nodeCount = this.state.userState.numberRegions *\n      this.state.userState.DCsPerRegion *\n      this.state.userState.AZsPerDC *\n      this.state.userState.NodesPerAZ;\n    return (\n      <div>\n        <div className=\"App-form\">\n          <form>\n            <table className=\"App-table\">\n              <thead>\n                <tr>\n                  <th>Regions</th>\n                  <th>DCs per Region</th>\n                  <th>AZs per DC</th>\n                  <th>Nodes per AZ</th>\n                  <th>Replication Factor</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>\n                    <input className=\"App-input\" type=\"number\" value={this.state.userState.numberRegions} onChange={this.handleNumberRegionsChange} />\n                  </td>\n                  <td>\n                    <input className=\"App-input\" name=\"DCsPerRegion\" type=\"number\" value={this.state.userState.DCsPerRegion} onChange={this.handleDCsPerRegionChange} />\n                  </td>\n                  <td>\n                    <input className=\"App-input\" name=\"AZsPerDC\" type=\"number\" value={this.state.userState.AZsPerDC} onChange={this.handleAZsPerDCChange} />\n                  </td>\n                  <td>\n                    <input className=\"App-input\" name=\"NodesPerAZ\" type=\"number\" value={this.state.userState.NodesPerAZ} onChange={this.handleNodesPerAZChange} />\n                  </td>\n                  <td>\n                    <input className=\"App-input\" name=\"replicationFactor\" type=\"number\" value={this.state.userState.replicationFactor} onChange={this.handleReplicationFactorChange} />\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <div className=\"FailureMode\">\n              <div>Failure Mode:</div>\n              <select className=\"FailureSelect\" value={this.state.userState.failureMode} onChange={this.handleFailureModeChange}>\n                <option value={FailureMode.None}>None</option>\n                <option value={FailureMode.Region}>Region</option>\n                <option value={FailureMode.DataCenter}>DataCenter</option>\n                <option value={FailureMode.AvailabilityZone}>AvailabilityZone</option>\n                <option value={FailureMode.Node}>Node</option>\n              </select>\n            </div>\n          </form>\n        </div>\n        {\n          nodeCount < this.state.userState.replicationFactor && <div className=\"Underreplicated\">\n            The system is underreplicated: There are {nodeCount} nodes, but {this.state.userState.replicationFactor} are needed.\n            </div>\n        }\n        {\n          this.state.userState.failureMode !== FailureMode.None && <div className=\"FailureResults\">\n            <div>With {this.state.userState.replicationFactor}x replication you can survive a max of {this.state.allowableDead} dead replica{this.state.allowableDead !== 1 && \"s\"}.</div>\n            <div>This scenario will survive losing at most:</div>\n            <div className=\"FailureTable\">\n              {!!this.state.failedRegions &&\n                <div className=\"FailureRow\">\n                  <div className=\"FailureColumn\">\n                    <div className=\"FailureHeader\">Regions</div>\n                  </div>\n                  <div className=\"FailureColumn\">\n                    <div className=\"FailureValue\">{this.state.failedRegions}</div>\n                  </div>\n                </div>\n              }\n              {!!(this.state.failedRegions || this.state.failedDCs) &&\n                <div className=\"FailureRow\">\n                  <div className=\"FailureColumn\">\n                    <div className=\"FailureHeader\">Data Centers</div>\n                  </div>\n                  <div className=\"FailureColumn\">\n                    <div className=\"FailureValue\">{this.state.failedDCs}</div>\n                  </div>\n                </div>\n              }\n              {!!(this.state.failedRegions || this.state.failedDCs || this.state.failedAZs) &&\n                <div className=\"FailureRow\">\n                  <div className=\"FailureColumn\">\n                    <div className=\"FailureHeader\">Availability Zones</div>\n                  </div>\n                  <div className=\"FailureColumn\">\n                    <div className=\"FailureValue\">{this.state.failedAZs}</div>\n                  </div>\n                </div>\n              }\n              <div className=\"FailureRow\">\n                <div className=\"FailureColumn\">\n                  <div className=\"FailureHeader\">Nodes</div>\n                </div>\n                <div className=\"FailureColumn\">\n                  <div className=\"FailureValue\">{this.state.failedNodes}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n        <div className=\"App-container\">\n          {regions}\n        </div>\n      </div >\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainForm />\n      </header>\n    </div >\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}